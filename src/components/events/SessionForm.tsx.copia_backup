"use client";

import { useTransition } from "react";

import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { it } from "date-fns/locale";

import { useForm } from "react-hook-form";

import { createSession } from "@/actions/session-actions";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Calendar,
  Clock,
  MapPin,
  User,
  FileText,
  AlertCircle,
  CheckCircle2,
} from "lucide-react";
import { SessionFormData, SessionFormSchema } from "@/lib/schema";

interface SessionFormProps {
  eventId: string;
  onFormSubmit: () => void;
  onSessionCreated?: (session: Session) => void;
}

export default function SessionForm({
  eventId,
  onFormSubmit,
  onSessionCreated,
}: SessionFormProps) {
  const [isPending, startTransition] = useTransition();

  const form = useForm<SessionFormData>({
    resolver: zodResolver(SessionFormSchema),
    defaultValues: {
      title: "",
      description: "",
      room: "",
      speakerId: "",
      eventId: eventId,
      startTime: undefined,
      endTime: undefined,
    },
  });

  const processForm = async (data: SessionFormData) => {
    startTransition(async () => {
      const result = await createSession(eventId, data);

      if (result.success) {
        onFormSubmit();
        if (onSessionCreated) {
          // In una implementazione reale, dovresti recuperare la sessione completa dal DB
          onSessionCreated({
            id: result.data?.sessionId,
            ...data,
          });
        }
      } else {
        // Gestisci l'errore di business logic specifico
        if (result.errorCode === "SPEAKER_CONFLICT") {
          form.setError("speakerId", {
            type: "custom",
            message: result.error,
          });
        } else {
          form.setError("root", {
            type: "custom",
            message: result.error,
          });
        }
      }
    });
  };

  // Lista mock di speaker - in una implementazione reale, recupereresti dal DB
  const mockSpeakers = [
    { id: "1", name: "Mario Rossi" },
    { id: "2", name: "Giulia Verdi" },
    { id: "3", name: "Paolo Bianchi" },
  ];

  return (
    <div className="max-w-2xl mx-auto">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(processForm)} className="space-y-6">
          {/* Informazioni Generali Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Informazioni Generali
              </CardTitle>
              <CardDescription>
                Inserisci i dettagli principali della sessione
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      Titolo Sessione
                    </FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Es: Introduzione a React Hooks"
                        className="text-base"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      Descrizione
                    </FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Descrizione dettagliata della sessione..."
                        className="min-h-[120px] text-base leading-relaxed"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Programmazione Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5" />
                Programmazione
              </CardTitle>
              <CardDescription>
                Definisci date e orari della sessione
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="startTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        Orario Inizio
                        <Badge variant="secondary" className="text-xs">
                          Obbligatorio
                        </Badge>
                      </FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant="outline"
                              className="w-full justify-start text-left font-normal h-11"
                            >
                              {field.value ? (
                                <span className="flex items-center gap-2">
                                  <CalendarIcon className="h-4 w-4 text-blue-500" />
                                  {format(field.value, "dd MMM yyyy HH:mm", {
                                    locale: it,
                                  })}
                                </span>
                              ) : (
                                <span className="flex items-center gap-2 text-muted-foreground">
                                  <Calendar className="h-4 w-4" />
                                  Scegli data e orario...
                                </span>
                              )}
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={(date) => {
                              if (date) {
                                const newDate = new Date(date);
                                newDate.setHours(9, 0, 0, 0);
                                field.onChange(newDate);
                              }
                            }}
                            />
                          <div className="border-t p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <Clock className="h-4 w-4" />
                              <span className="text-sm font-medium">Orario</span>
                            </div>
                            <Input
                              type="time"
                              onChange={(e) => {
                                const [hours, minutes] = e.target.value.split(":");
                                const date = field.value || new Date();
                                date.setHours(parseInt(hours), parseInt(minutes));
                                field.onChange(date);
                              }}
                              defaultValue={
                                field.value ? format(field.value, "HH:mm") : "09:00"
                              }
                            />
                          </div>
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="endTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        Orario Fine
                        <Badge variant="secondary" className="text-xs">
                          Obbligatorio
                        </Badge>
                      </FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant="outline"
                              className="w-full justify-start text-left font-normal h-11"
                            >
                              {field.value ? (
                                <span className="flex items-center gap-2">
                                  <CalendarIcon className="h-4 w-4 text-blue-500" />
                                  {format(field.value, "dd MMM yyyy HH:mm", {
                                    locale: it,
                                  })}
                                </span>
                              ) : (
                                <span className="flex items-center gap-2 text-muted-foreground">
                                  <Calendar className="h-4 w-4" />
                                  Scegli data e orario...
                                </span>
                              )}
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={(date) => {
                              if (date) {
                                const newDate = new Date(date);
                                newDate.setHours(10, 0, 0, 0);
                                field.onChange(newDate);
                              }
                            }}
                            />
                          <div className="border-t p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <Clock className="h-4 w-4" />
                              <span className="text-sm font-medium">Orario</span>
                            </div>
                            <Input
                              type="time"
                              onChange={(e) => {
                                const [hours, minutes] = e.target.value.split(":");
                                const date = field.value || new Date();
                                date.setHours(parseInt(hours), parseInt(minutes));
                                field.onChange(date);
                              }}
                              defaultValue={
                                field.value ? format(field.value, "HH:mm") : "10:00"
                              }
                            />
                          </div>
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Locazione e Relatori Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="h-5 w-5" />
                Locazione e Relatori
              </CardTitle>
              <CardDescription>
                Specifica la sala e assegna un relatore
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="room"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <MapPin className="h-4 w-4" />
                        Sala
                      </FormLabel>
                      <FormControl>
                        <Input
                          placeholder="Es: Sala A, Auditorium"
                          className="h-11"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="speakerId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <User className="h-4 w-4" />
                        Relatore
                      </FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger className="h-11">
                            <SelectValue placeholder="Seleziona relatore" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="none">Nessun relatore</SelectItem>
                          {mockSpeakers.map((speaker) => (
                            <SelectItem key={speaker.id} value={speaker.id}>
                              <div className="flex items-center gap-2">
                                <User className="h-4 w-4" />
                                {speaker.name}
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Error Messages */}
          {form.formState.errors.root && (
            <Card className="border-red-200 bg-red-50">
              <CardContent className="py-4">
                <div className="flex items-center gap-2 text-red-600">
                  <AlertCircle className="h-4 w-4" />
                  <span className="text-sm font-medium">
                    {form.formState.errors.root.message}
                  </span>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Actions */}
          <CardFooter className="flex justify-between">
            <div className="text-sm text-muted-foreground">
              * Campi obbligatori
            </div>
            <Button 
              type="submit" 
              disabled={isPending}
              className="px-6 h-11"
            >
              {isPending ? (
                <span className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
                  Salvataggio...
                </span>
              ) : (
                <span className="flex items-center gap-2">
                  <CheckCircle2 className="h-4 w-4" />
                  Salva Sessione
                </span>
              )}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </div>
  );
}
